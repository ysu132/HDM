from scipy.stats import ttest_rel, wilcoxon

baseline = [70, 0, 70, 80, 20, 20, 70, 0, 0, 70, 10, 20, 10, 70, 70, 70, 10, 70, 80, 60, 20, 70, 0, 70, 20, 10, 70, 60, 70, 70, 30, 70, 30, 70, 70, 70, 20, 70, 30, 0, 70, 80, 60, 5, 70, 70, 70, 70, 70, 70, 70, 20, 0, 70, 70, 70, 60, 0, 70, 80, 30, 70, 70, 70, 20, 60, 70, 30, 70, 30, 70, 70, 70, 70, 80, 20, 0, 70, 30, 30, 20, 70, 10, 0, 80, 40, 20, 70, 60, 20, 60, 70, 70, 70, 80, 70, 70, 70, 70, 60]

hdm = [80, 30, 70, 70, 70, 20, 70, 10, 70, 70, 10, 70, 20, 70, 10, 70, 60, 70, 70, 30, 30, 70, 70, 30, 30, 70, 70, 70, 70, 0, 20, 60, 70, 30, 70, 60, 10, 70, 60, 30, 0, 70, 20, 70, 30, 30, 20, 70, 70, 70, 70, 70, 70, 70, 70, 70, 60, 70, 70, 70, 0, 70, 70, 70, 10, 70, 60, 20, 70, 60, 70, 70, 70, 70, 80, 30, 60, 70, 70, 70, 70, 20, 0, 70, 70, 70, 70, 70, 10, 50, 60, 80, 80, 30, 70, 70, 70, 70, 60, 20]

baseline_fl =  [100, 100, 70, 100, 100, 100, 100, 100, 100, 0, 100, 100, 80, 80, 100, 100, 100, 100, 90, 100, 90, 100, 100, 100, 100, 30, 100, 0, 100, 80, 80, 100, 100, 100, 100, 100, 100, 20, 100, 90, 100, 100, 100, 100, 90, 100, 100, 100, 90, 100, 100, 100, 90, 90, 100, 80, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 90, 90, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 90, 100, 0, 70, 100, 100, 90, 80, 100, 100, 80, 100, 100, 100, 100, 90, 100, 100, 50, 100, 100]

hdm_fl = [90, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 100, 30, 100, 100, 100, 100, 100, 100, 100, 100, 95, 100, 100, 100, 100, 100, 20, 100, 100, 100, 90, 80, 100, 100, 100, 100, 100, 100, 100, 80, 100, 100, 100, 100, 100, 80, 100, 100, 100, 90, 100, 80, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 90, 100, 100, 100, 100, 100, 100, 80, 90, 100, 100, 100, 100, 100, 30, 0, 100, 100, 100, 100, 100, 100, 90, 100, 100, 100, 80, 0, 100, 100, 100, 100, 100, 100]

baseline_in = [100, 80, 70, 100, 100, 100, 100, 100, 100, 90, 90, 100, 60, 30, 100, 90, 90, 100, 90, 90, 20, 90, 90, 90, 100, 30, 100, 20, 100, 80, 80, 90, 90, 100, 100, 90, 90, 20, 100, 70, 100, 90, 100, 90, 80, 100, 90, 100, 70, 90, 90, 90, 80, 80, 80, 90, 90, 100, 80, 100, 100, 90, 100, 90, 70, 80, 90, 60, 90, 100, 100, 100, 70, 90, 70, 100, 100, 100, 100, 90, 0, 20, 90, 100, 90, 90, 60, 100, 80, 80, 100, 100, 90, 80, 80, 100, 90, 20, 100, 100]

hdm_in = [70, 90, 100, 90, 90, 90, 100, 100, 100, 100, 80, 90, 80, 90, 20, 100, 100, 90, 90, 100, 100, 60, 100, 100, 100, 90, 80, 20, 100, 20, 85, 100, 100, 80, 80, 100, 80, 90, 80, 80, 100, 80, 60, 90, 90, 100, 90, 90, 60, 100, 100, 90, 60, 90, 80, 100, 90, 90, 80, 20, 100, 100, 100, 90, 60, 80, 90, 80, 90, 100, 100, 90, 90, 70, 90, 100, 90, 100, 100, 100, 30, 10, 100, 100, 90, 80, 90, 90, 85, 70, 100, 100, 90, 10, 70, 100, 70, 30, 100, 90]
# t_stat, p_value = ttest_rel(baseline, hdm)
# print(f"Paired t-test p-value: {p_value}")

# # 方法 2：Wilcoxon（更稳健）
# w_stat, p_value = wilcoxon(baseline, hdm)
# print(f"Wilcoxon test p-value: {p_value}")

import numpy as np
import scipy.stats as stats

def bootstrap_test(model_a, model_b, n_samples=50, alpha=0.05):
    diffs = []
    n = len(model_a)
    for _ in range(n_samples):
        idx = np.random.randint(0, n, n)
        diff = np.mean(np.array(model_a)[idx]) - np.mean(np.array(model_b)[idx])
        diffs.append(diff)
    
    # 置信区间
    lower = np.percentile(diffs, 100 * (alpha / 2))
    upper = np.percentile(diffs, 100 * (1 - alpha / 2))
    
    # 伪 p-value（双尾检验）
    p_value = 2 * min(
        np.mean(np.array(diffs) <= 0),
        np.mean(np.array(diffs) > 0)
    )

    return (lower, upper), p_value

ci, p_value = bootstrap_test(baseline, hdm)
print(f"95% Confidence Interval: {ci}")
print(f"Bootstrap p-value: {p_value}")

t_statistic, p_value = stats.ttest_ind(baseline, hdm)
# 输出结果
print(f't统计量: {t_statistic}')
print(f'p值: {p_value}')